# Определение декоратора NumberTransfomer
# Декоратор принимает на вход функцию, которую нужно обернуть.
def NumberTransfomer(func):
    # Определение вложенной функции-трансформера, которая будет заменять исходную функцию
    def trancform(*a):
        # Преобразуем каждый аргумент из строки в целое число
        # Используем списковое включение для создания нового списка r,
        # в котором каждый аргумент из a преобразован в целое число.
        r = [int(i) for i in a]
        
        # Вызываем оригинальную функцию func, используя преобразованные аргументы r
        # и возвращаем её результат. Таким образом, func работает уже с целыми числами.
        return func(*r)
    
    # Возвращаем функцию-трансформер, которая теперь будет использоваться
    # вместо оригинальной функции, но уже с добавленным преобразованием аргументов.
    return trancform

# Используем декоратор @NumberTransfomer для функции сложения чисел.
# Теперь функция SumNumber будет автоматически преобразовывать строковые аргументы в целые числа.
@NumberTransfomer
def SumNumber(a, b):
    # Оригинальная функция просто складывает два числа и возвращает результат.
    return a + b

# Используем декоратор @NumberTransfomer для функции умножения чисел.
# Теперь функция multiplicationNumber также будет преобразовывать строки в целые числа.
@NumberTransfomer
def multiplicationNumber(a, b):
    # Оригинальная функция умножает два числа и возвращает результат.
    return a * b

# Главная часть программы, которая будет выполняться при запуске скрипта
if __name__ == "__main__":
    # Вызываем функцию SumNumber с аргументами в виде строк "134" и "0".
    # Декоратор преобразует строки в целые числа, поэтому 134 + 0 = 134.
    print(SumNumber("134", "0"))  # Ожидаемый вывод: 134
    
    # Вызываем функцию multiplicationNumber с аргументами "22" и "0".
    # Декоратор преобразует строки в целые числа, поэтому 22 * 0 = 0.
    print(multiplicationNumber("22", "0"))  # Ожидаемый вывод: 0
